- name: Key Exchange - Obtain SSO token with using username/password credentials
  ovirt_auth:
    url: "{{ auth.manager }}"
    username: "{{ auth.username }}"
    password: "{{ auth.password }}"
    insecure: "{{ run_insecure }}"
  run_once: yes
  delegate_to: localhost

- name: Key Exchange - Wait for VM Up
  wait_for:
    timeout: 45
  delegate_to: localhost

- name: Key Exchange - Fact the networker info of the vm
  ovirt_nic_info:
    auth: "{{ ovirt_auth }}"
    vm: "{{ inventory_hostname }}"
    fetch_nested: yes
  register: network

- name: Key Exchange - Fetch IP from XML VM API
  uri:
    url: "{{ auth.manager }}/vms/{{ network.ovirt_nics[0].vm.id }}/nics/{{ network.ovirt_nics[0].reported_devices[0].id }}/reporteddevices/{{ network.ovirt_nics[0].reported_devices[0].id }}"
    user: "{{ auth.username }}"
    password: "{{ auth.password }}"
    method: GET
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    headers:
      Content-Type: "application/xml"
  register: xml

- name: Key Exchange - Fact ip
  set_fact:
    ip_dhcp: "{{ xml.content | regex_findall('<adrress>(.*?)</adrress>') }}"

- name: Key Exchange - Check if host is not already in the known_hosts file
  lineinfile:
    path: /root/.ssh/known_hosts
    state: absent
    regexp: '^{{ item }}'
  delegate_to: localhost
  with_items:
    - "{{ inventory_hostname }}"
  tags:
    - erase_ssh_key

- name: Key Exchange - Check the connection
  wait_for_connection:
    connect_timeout: 30
    sleep: 5
    delay: 5
    timeout: 300

- name: Key Exchange - Copy the ssh key to the remote host
  authorized_key:
    user: root
    key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
    state: present
  tags:
    - deploy_ssh_key
  delegate_to: "{{ ip_dhcp }}"
